generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  passwordHash    String    @map("password_hash")
  activationCode  String?   @unique @map("activation_code")
  isActivated     Boolean   @default(false) @map("is_activated")
  createdAt       DateTime  @default(now()) @map("created_at")
  lastLogin       DateTime? @map("last_login_at")

  profile         Profile?
  tokens          Token[]

  recipes           Recipe[]          @relation("UserRecipes") 
  favoriteRecipes   FavoriteRecipes[]
  savedRecipes      UserSavedRecipe[]
  cookbooks         Cookbook[]
}

model Profile {
  id        String   @id @default(uuid())
  name      String?
  avatarUrl String?  @map("avatar_url")

  userId    String   @unique @map("user_id")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Token {
  id        String   @id @default(uuid())
  value     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  userId    String   @unique @map("user_id")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recipe {
  id                String      @id @default(uuid())
  title             String
  description       String?
  imageUrl          String?     @map("image_url")
  category          Category?
  difficulty        Difficulty?
  cuisine           Cuisine?
  cookingTime       Int         @map("cooking_time")
  ingredients       String[]
  steps             Json
  createdAt         DateTime    @default(now()) @map("created_at")

  authorId          String      @map("author_id")

  author            User @relation("UserRecipes", fields: [authorId], references: [id], onDelete: Cascade)
  likedBy           FavoriteRecipes[]
  savedByUsers      UserSavedRecipe[]
}

model TempRecipe {
  id                String      @id @default(uuid())
  title             String
  description       String?
  imageUrl          String?     @map("image_url")
  category          Category?
  difficulty        Difficulty?
  cuisine           Cuisine?
  cookingTime       Int         @map("cooking_time")
  ingredients       String[]
  steps             Json
  createdAt         DateTime    @default(now()) @map("created_at")

  authorId          String      @map("author_id")
}

model UserSavedRecipe {
  id            String       @id @default(uuid())
  cookbookId    String?      @map("cookbook_id")

  userId        String       @map("user_id")
  recipeId      String       @map("recipe_id")

  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe        Recipe       @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  cookbook      Cookbook?    @relation(fields: [cookbookId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId, cookbookId])
}

model Cookbook {
  id         String       @id @default(uuid())
  name       String
  createdAt  DateTime     @default(now()) @map("created_at")
  colorPalette Json?

  userId     String       @map("user_id")

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipes    UserSavedRecipe[]
}

model FavoriteRecipes {
  id         String      @id @default(uuid())
  likedAt    DateTime    @default(now()) @map("liked_at")

  userId     String      @map("user_id")
  recipeId   String      @map("recipe_id")

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe     Recipe      @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
}

model Ingredient {
  id    String @id @default(uuid())
  title String
}

enum Category {
  SOUPS
  MAIN_DISHES
  SIDE_DISHES
  SALADS
  SNACKS
  DESSERTS
  BAKERY_PRODUCTS
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Cuisine {
  RUSSIAN
  BELARUSIAN
}
